
name: Master Branch

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**.md'

jobs:
  build:
    name: builds
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm install

      - run: npm ci
      - run: npm run build --if-present

  docker-check-vulnerabilities:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Checkov Dockerfile Scan
        uses: bridgecrewio/checkov-action@v12.2530.0
        with:
          directory: .
          framework: dockerfile

      - name: Upload SARIF file

        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif
 
  docker:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: docker-check-vulnerabilities
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/albums-front:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  Deploy:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    environment: ${{ vars.ENVIRONMENT_STAGE }}
    needs: docker
    steps:
      - name: Deploy to Staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.REMOTE_HOST }}
          port: 22
          username: ${{ secrets.REMOTE_USER }}
          script: |
            echo "======VERSION======"
            podman version
            echo "======INFO========="
            podman info
            echo "======DEPLOY======="
            # Check if the pod 'albums' exists, and if not, create it
            podman pod exists albums || podman pod create --name albums -p 3000:3000
            
            # Check if the container 'albums-front' is running
            if podman container exists albums-front; then
            podman rm -f albums-front
            podman image rm docker.io/arturmon/albums-front:latest
            fi
            
            podman run --pod albums --privileged --name albums-front \
            -d docker.io/arturmon/albums-front:latest